/*************************************NOTES*******************************/

/****************June 8, 2021******************************/

1. mapStatetoProps and Dispatch runs every time the react is reloaded.
 All the available mapStatetoProps  in the apps runs whether neceesaary or not.
Performance issue aaucha yesto huda kina bhane harek choti state re render huncha hamlai change nahune value bhaye pani naya object banaucha 
pheri render huncha yesle garda Performance issue aaucha.
Yesko solution bhaneko Momoization, using Reselect.

yarn add reselect

Memoized Selector ko barema lekh..THey are used to eliminated the re render problem. 

It makes sure that our (cartdropdown component/ other component) is not getting re rendered, whenever the state changes that is unrelatable to cart items.

/****************June 9, 2021******************************/

1. connect actualyy passes Dispatch into our components as a prop if we donot suppply second argument to connect.
 so if we donot supply mapDispatchToProps as the second parameter connect  will pass Dispatch into our component as a property.  

 Local Storage 
 Session Storage

Redux react  or redux persist for the local Storage.

Saturaday 
Revison pRoscedire carried out

/****************June 17, 2021******************************/

 Local Storage 
 Session Storage

we will use redux persist library for local storage.


Session storage persist it throughout the session. As long as the tab is open even if we refresh the page we will still have access to 
what we have stored in session storage. If we close the page we will lose whatever is stored in session storage.

Local storage will persist until we clear it out. We will have it even if we close the windows close the tab.

Local Storage has getitem and setitem. set allows to put in into the local storage and get grabs it from the storage.

window.localStorage.setItem('myitemkey', JSON.stringify(myObjecttoStore))

It only stores string so we must convert to string.

----Redux Persist-----

yarn add redux-persist


/****************June 28, 2021******************************/

use of ownProps ????

/****************June 29, 2021******************************/

Data Normalisation:
    The conecpt of storing list of elements inside of an object instead of an array is called Data Normalisation.
    Eg: Before we kept the collections in array and when using find it searched from left to right decresing the performance.

    THis is actually the ideal way that we should be storing large arrays of elements where we need the individual element inside
    of our reducer.

    Store as obejcts instead as arrays
    Eg: 
     Before:
     const SHOP_DATA =[
         {
             id:1,
             ....
         },
         {
             ....
         }
     ]

     After:
        const SHOP_DATA ={
         hats:{
             id:1,
             ....
         },
         sneakers:{
             ....
         }
        }


    ::::::THINKING ABOUT DATA FLOW:::::
    While working and writing the code, understand what is efficient, what the feature requires and work according to it.
    There is no particular rule for data flow but being a developer it is our duty always to make proper and efficient flow in the codes.
    Make smart decisions

    :::STRIPE INTEGRATION ::::

    yarn add react-stripe-checkout

    use < StripeCheckout
        />
        and fill necessary attributes to display the payment box.
        Available at https://github.com/azmenak/react-stripe-checkout


      :::DEPLOYING TO HEROKU::::

        1.install HEROKU
        2. heroku login
        3. heroku create ecommercereact01 --buildpack https://github.com/mars/create-react-app-buildpack.git
        4. git push heroku master
                -if master doesn't work try git push heroku main

/****************June 29, 2021******************************/
 CSS in JS syntax React 


 /****************July 2, 2021******************************/

 :::::::CSS in JS::::::::;;
    we will use styled components.
    CSS is written inside the JS
    It makes the perfromance very fast.
    It reduces the chance of styles leaking all over the place due to the CSS global name space that it occupies.
    It advantage is we are able to encapsulate all of our css to just the component that is relevant. 